// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace RankedElo.Persistence.Migrations
{
    [DbContext(typeof(RankedEloDbContext))]
    partial class RankedEloDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("RankedElo.Core.Entities.Elo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("PlayerId");

                    b.Property<double>("Points");

                    b.Property<int?>("TeamId");

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("EloHistory");
                });

            modelBuilder.Entity("RankedElo.Core.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("RankedElo.Core.Entities.PlayerSoloTeamMatches", b =>
                {
                    b.Property<int>("PlayerId");

                    b.Property<int>("SoloTeamMatchId");

                    b.HasKey("PlayerId", "SoloTeamMatchId");

                    b.HasIndex("SoloTeamMatchId");

                    b.ToTable("PlayerSoloTeamMatches");
                });

            modelBuilder.Entity("RankedElo.Core.Entities.SoloTeamMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndTime");

                    b.Property<DateTime>("StartTime");

                    b.Property<int>("Team1Score");

                    b.Property<int>("Team2Score");

                    b.HasKey("Id");

                    b.ToTable("SoloTeamMatches");
                });

            modelBuilder.Entity("RankedElo.Core.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("RankedElo.Core.Entities.TeamMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndTime");

                    b.Property<DateTime>("StartTime");

                    b.Property<int?>("Team1Id");

                    b.Property<int>("Team1Score");

                    b.Property<int?>("Team2Id");

                    b.Property<int>("Team2Score");

                    b.HasKey("Id");

                    b.HasIndex("Team1Id");

                    b.HasIndex("Team2Id");

                    b.ToTable("TeamMatches");
                });

            modelBuilder.Entity("RankedElo.Core.Entities.TwoPlayerMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndTime");

                    b.Property<int?>("Player1Id");

                    b.Property<int?>("Player2Id");

                    b.Property<DateTime>("StartTime");

                    b.Property<int>("Team1Score");

                    b.Property<int>("Team2Score");

                    b.HasKey("Id");

                    b.HasIndex("Player1Id");

                    b.HasIndex("Player2Id");

                    b.ToTable("TwoPlayerMatches");
                });

            modelBuilder.Entity("RankedElo.Core.Entities.Elo", b =>
                {
                    b.HasOne("RankedElo.Core.Entities.Player")
                        .WithMany("EloHistory")
                        .HasForeignKey("PlayerId");

                    b.HasOne("RankedElo.Core.Entities.Team")
                        .WithMany("EloHistory")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("RankedElo.Core.Entities.PlayerSoloTeamMatches", b =>
                {
                    b.HasOne("RankedElo.Core.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RankedElo.Core.Entities.SoloTeamMatch", "SoloTeamMatch")
                        .WithMany()
                        .HasForeignKey("SoloTeamMatchId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RankedElo.Core.Entities.TeamMatch", b =>
                {
                    b.HasOne("RankedElo.Core.Entities.Team", "Team1")
                        .WithMany()
                        .HasForeignKey("Team1Id");

                    b.HasOne("RankedElo.Core.Entities.Team", "Team2")
                        .WithMany()
                        .HasForeignKey("Team2Id");
                });

            modelBuilder.Entity("RankedElo.Core.Entities.TwoPlayerMatch", b =>
                {
                    b.HasOne("RankedElo.Core.Entities.Player", "Player1")
                        .WithMany()
                        .HasForeignKey("Player1Id");

                    b.HasOne("RankedElo.Core.Entities.Player", "Player2")
                        .WithMany()
                        .HasForeignKey("Player2Id");
                });
#pragma warning restore 612, 618
        }
    }
}
